// Generated by gencpp from file interbotix_sdk/SingleCommand.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_SDK_MESSAGE_SINGLECOMMAND_H
#define INTERBOTIX_SDK_MESSAGE_SINGLECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_sdk
{
template <class ContainerAllocator>
struct SingleCommand_
{
  typedef SingleCommand_<ContainerAllocator> Type;

  SingleCommand_()
    : joint_name()
    , cmd(0.0)  {
    }
  SingleCommand_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , cmd(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef double _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::interbotix_sdk::SingleCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_sdk::SingleCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SingleCommand_

typedef ::interbotix_sdk::SingleCommand_<std::allocator<void> > SingleCommand;

typedef boost::shared_ptr< ::interbotix_sdk::SingleCommand > SingleCommandPtr;
typedef boost::shared_ptr< ::interbotix_sdk::SingleCommand const> SingleCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_sdk::SingleCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interbotix_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'interbotix_sdk': ['/home/jonathan/Desktop/Projects/WidowX200_RL/src/interbotix_ros_arms/interbotix_sdk/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::SingleCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::SingleCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::SingleCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d45868a3dac16da3c97708e8cdbf2c6";
  }

  static const char* value(const ::interbotix_sdk::SingleCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d45868a3dac16daULL;
  static const uint64_t static_value2 = 0x3c97708e8cdbf2c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_sdk/SingleCommand";
  }

  static const char* value(const ::interbotix_sdk::SingleCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Send a command to the specified joint\n\
#\n\
# 'joint_name' is the name of the joint to control (any of the motor names listed\n\
# in the 'order' or 'singles' lists located in a motor config file - except for shadow motors)\n\
# 'cmd' can be a position [rad], velocity [rad/s], current [mA], or pwm depending on what operating\n\
# mode the joint is currently set at.\n\
#\n\
# Note that the gripper can be controlled by publishing this type of message to the\n\
# /<robot_name>/single_joint/command topic as well. There are two main differences between using\n\
# this topic and the /<robot_name>/gripper/command topic for controlling the gripper:\n\
#   1) By publishing to the /<robot_name>/gripper/command topic, you do not have to specify that you\n\
#      are commanding the gripper - it's automatically understood.\n\
#   2) When the gripper is in \"position\" control, using the /<robot_name>/gripper/command topic specifies a\n\
#      linear distance in meters between the gripper fingers. However, using the /<robot_name>/single_joint/command\n\
#      topic specifies an angular distance in radians.\n\
\n\
string joint_name\n\
float64 cmd\n\
";
  }

  static const char* value(const ::interbotix_sdk::SingleCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_sdk::SingleCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_sdk::SingleCommand_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "cmd: ";
    Printer<double>::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_SDK_MESSAGE_SINGLECOMMAND_H
