// Generated by gencpp from file interbotix_joy_control/ArmJoyControl.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_JOY_CONTROL_MESSAGE_ARMJOYCONTROL_H
#define INTERBOTIX_JOY_CONTROL_MESSAGE_ARMJOYCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_joy_control
{
template <class ContainerAllocator>
struct ArmJoyControl_
{
  typedef ArmJoyControl_<ContainerAllocator> Type;

  ArmJoyControl_()
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , waist_cmd(0)
    , gripper_cmd(0)
    , robot_pose(0)
    , speed_cmd(0)
    , toggle_speed_cmd(0)
    , gripper_pwm_cmd(0)  {
    }
  ArmJoyControl_(const ContainerAllocator& _alloc)
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , waist_cmd(0)
    , gripper_cmd(0)
    , robot_pose(0)
    , speed_cmd(0)
    , toggle_speed_cmd(0)
    , gripper_pwm_cmd(0)  {
  (void)_alloc;
    }



   typedef int8_t _ee_x_cmd_type;
  _ee_x_cmd_type ee_x_cmd;

   typedef int8_t _ee_y_cmd_type;
  _ee_y_cmd_type ee_y_cmd;

   typedef int8_t _ee_z_cmd_type;
  _ee_z_cmd_type ee_z_cmd;

   typedef int8_t _ee_roll_cmd_type;
  _ee_roll_cmd_type ee_roll_cmd;

   typedef int8_t _ee_pitch_cmd_type;
  _ee_pitch_cmd_type ee_pitch_cmd;

   typedef int8_t _waist_cmd_type;
  _waist_cmd_type waist_cmd;

   typedef int8_t _gripper_cmd_type;
  _gripper_cmd_type gripper_cmd;

   typedef int8_t _robot_pose_type;
  _robot_pose_type robot_pose;

   typedef int8_t _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef int8_t _toggle_speed_cmd_type;
  _toggle_speed_cmd_type toggle_speed_cmd;

   typedef int8_t _gripper_pwm_cmd_type;
  _gripper_pwm_cmd_type gripper_pwm_cmd;



  enum {
    EE_X_INC = 1,
    EE_X_DEC = 2,
    EE_Y_INC = 3,
    EE_Y_DEC = 4,
    EE_Z_INC = 5,
    EE_Z_DEC = 6,
    EE_ROLL_CCW = 7,
    EE_ROLL_CW = 8,
    EE_PITCH_UP = 9,
    EE_PITCH_DOWN = 10,
    WAIST_CCW = 11,
    WAIST_CW = 12,
    GRIPPER_OPEN = 13,
    GRIPPER_CLOSE = 14,
    HOME_POSE = 15,
    SLEEP_POSE = 16,
    SPEED_INC = 17,
    SPEED_DEC = 18,
    SPEED_COURSE = 19,
    SPEED_FINE = 20,
    GRIPPER_PWM_INC = 21,
    GRIPPER_PWM_DEC = 22,
  };


  typedef boost::shared_ptr< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> const> ConstPtr;

}; // struct ArmJoyControl_

typedef ::interbotix_joy_control::ArmJoyControl_<std::allocator<void> > ArmJoyControl;

typedef boost::shared_ptr< ::interbotix_joy_control::ArmJoyControl > ArmJoyControlPtr;
typedef boost::shared_ptr< ::interbotix_joy_control::ArmJoyControl const> ArmJoyControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interbotix_joy_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'interbotix_joy_control': ['/home/jonathan/Desktop/Projects/WidowX200_RL/src/interbotix_ros_arms/interbotix_examples/interbotix_joy_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74891567b0665aa1963bdc439b948bf5";
  }

  static const char* value(const ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74891567b0665aa1ULL;
  static const uint64_t static_value2 = 0x963bdc439b948bf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_joy_control/ArmJoyControl";
  }

  static const char* value(const ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Send commands from the joy_control node to the joy_robot_control node\n\
\n\
# enum values that define the joystick controls for the robot\n\
\n\
#########################################################################################################\n\
\n\
# Control the motion of the virtual 'ee_gripper_link' or end effector using the modern_robotics_ik engine\n\
# Position Control\n\
int8 EE_X_INC = 1\n\
int8 EE_X_DEC = 2\n\
int8 EE_Y_INC = 3\n\
int8 EE_Y_DEC = 4\n\
int8 EE_Z_INC = 5\n\
int8 EE_Z_DEC = 6\n\
\n\
# Orientation Control\n\
int8 EE_ROLL_CCW = 7\n\
int8 EE_ROLL_CW = 8\n\
int8 EE_PITCH_UP = 9\n\
int8 EE_PITCH_DOWN = 10\n\
\n\
#########################################################################################################\n\
\n\
# Control the motion of independent joints on the Arm or send predefined robot poses\n\
# Waist Joint Control\n\
int8 WAIST_CCW = 11\n\
int8 WAIST_CW = 12\n\
\n\
# Gripper Control\n\
int8 GRIPPER_OPEN = 13\n\
int8 GRIPPER_CLOSE = 14\n\
\n\
# Pose Control\n\
int8 HOME_POSE = 15\n\
int8 SLEEP_POSE = 16\n\
\n\
#########################################################################################################\n\
\n\
# Customize configurations for the Interbotix Arm\n\
# Inc/Dec Joint speed\n\
int8 SPEED_INC = 17\n\
int8 SPEED_DEC = 18\n\
\n\
# Quickly toggle between a fast and slow speed setting\n\
int8 SPEED_COURSE = 19\n\
int8 SPEED_FINE = 20\n\
\n\
# Inc/Dec Gripper pressure\n\
int8 GRIPPER_PWM_INC = 21\n\
int8 GRIPPER_PWM_DEC = 22\n\
\n\
#########################################################################################################\n\
\n\
# Control the motion of the Interbotix Arm\n\
int8 ee_x_cmd\n\
int8 ee_y_cmd\n\
int8 ee_z_cmd\n\
int8 ee_roll_cmd\n\
int8 ee_pitch_cmd\n\
\n\
# Independent Joint/Pose Control\n\
int8 waist_cmd\n\
int8 gripper_cmd\n\
int8 robot_pose\n\
\n\
# Speed Configs\n\
int8 speed_cmd\n\
int8 toggle_speed_cmd\n\
int8 gripper_pwm_cmd\n\
";
  }

  static const char* value(const ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_x_cmd);
      stream.next(m.ee_y_cmd);
      stream.next(m.ee_z_cmd);
      stream.next(m.ee_roll_cmd);
      stream.next(m.ee_pitch_cmd);
      stream.next(m.waist_cmd);
      stream.next(m.gripper_cmd);
      stream.next(m.robot_pose);
      stream.next(m.speed_cmd);
      stream.next(m.toggle_speed_cmd);
      stream.next(m.gripper_pwm_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmJoyControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_joy_control::ArmJoyControl_<ContainerAllocator>& v)
  {
    s << indent << "ee_x_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_x_cmd);
    s << indent << "ee_y_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_y_cmd);
    s << indent << "ee_z_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_z_cmd);
    s << indent << "ee_roll_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_roll_cmd);
    s << indent << "ee_pitch_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_pitch_cmd);
    s << indent << "waist_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waist_cmd);
    s << indent << "gripper_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_cmd);
    s << indent << "robot_pose: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_pose);
    s << indent << "speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "toggle_speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.toggle_speed_cmd);
    s << indent << "gripper_pwm_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_pwm_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_JOY_CONTROL_MESSAGE_ARMJOYCONTROL_H
